'''类'''

"""
理解面向对象编程有助于你像程序员那样看世界，还可以帮助你真正明白自己编写的代码：不仅是各行代码的作用，还有代码背后更宏大的概念。
了解类背后的概念可培养逻辑思维，让你能够通过编写程序来解决遇到的几乎任何问题。
"""

#根据约定，在Python中，首字母大写的名称指的是类
class Dog():#这个类定义中的括号是空的，因为我们要从空白创建这个类
    # 类中的函数称为方法
    '''__init__是一个特殊的方法，每当根据Dog类创建新实例时，Python都会自动运行它'''
    def __init__(self, name, age):
        """
        # 形参self 必不可少，还必须位于其他形参的前面。
        # Python调用这个__init__()方法来创建Dog实例时，将自动传入实参self
        # 每个与类相关联的方法调用都自动传递实参self，它是一个指向实例本身的引用，让实例能够访问类中的属性和方法。
        """
        # 初始化属性name和age
        self.name = name # 以self 为前缀的变量都可供类中的所有方法使用，我们还可以通过类的任何实例来访问这些变量
        self.age = age # 像这样可通过实例访问的变量称为属性
        # 每当我们根据Dog 类创建实例时，都只需给最后两个形参（name 和age ）提供值
    
    def sit(self):
        print(self.name.title() + " is now sitting.")
        
    def roll_over(self):
        print(self.name.title() + " rolled over!")

#根据类来创建对象被称为实例化
my_dog = Dog('harry', 2)
print(my_dog.name.title() + " is a " + str(my_dog.age) + "-year-old dog.")
my_dog.sit()

your_dog = Dog('Lucy', 3)
your_dog.roll_over()

"""
类编码风格：
1.类名应采用驼峰命名法，即将类名中的每个单词的首字母都大写，而不使用下划线。
2.实例名和模块名都采用小写格式，并在单词之间加上下划线。
3.对于每个类，都应紧跟在类定义后面包含一个文档字符串。这种文档字符串简要地描述类的功能，并遵循编写函数的文档字符串时
  采用的格式约定。每个模块也都应包含一个文档字符串，对其中的类可用于做什么进行描述。
4.在类中，可使用一个空行来分隔方法；而在模块中，可使用两个空行来分隔类。
5.需要同时导入标准库中的模块和你编写的模块时，先编写导入标准库模块的import语句，再添加一个空行，然后编写导入
  你自己编写的模块的import语句。在包含多条import语句的程序中，这种做法让人更容易明白程序使用的各个模块都来自何方
"""